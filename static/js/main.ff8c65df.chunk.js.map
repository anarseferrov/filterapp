{"version":3,"sources":["List.js","Form.js","Contacts.js","App.js","serviceWorker.js","index.js"],"names":["List","state","filterText","onChangeFilterText","e","setState","target","value","filteredContacts","this","props","contacts","filter","contact","name","toLowerCase","indexOf","className","id","placeholder","onChange","map","key","phone","Component","Form","bind","onSubmit","preventDefault","addContact","Contacts","App","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAyCeA,G,wNAjCXC,MAAQ,CACJC,WAAY,K,EAEhBC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CACVH,WAAYE,EAAEE,OAAOC,S,uDAGnB,IAAD,OACCC,EAAmBC,KAAKC,MAAMC,SAASC,QACzC,SAAAC,GACI,OAEO,IAFAA,EAAQC,KAAKC,cAAcC,QAC9B,EAAKf,MAAMC,WAAWa,kBAIlC,OACI,yBAAKE,UAAW,YACZ,2BAAOH,KAAK,SAASI,GAAG,SAASC,YAAa,0BAA2BZ,MAAOE,KAAKR,MAAMC,WAAYkB,SAAUX,KAAKN,qBACtH,wBAAIc,UAAW,QACVT,EAAiBa,KAAI,SAAAR,GAAO,OACzB,wBAAIS,IAAKT,EAAQK,IACb,0BAAMD,UAAW,QAASJ,EAAQC,MAClC,0BAAMG,UAAW,SAAUJ,EAAQU,OACnC,0BAAMN,UAAW,uB,GA5B1BO,c,cCqCJC,E,kDAtCX,aAAe,IAAD,8BACV,gBAIJxB,MAAQ,CACJa,KAAM,GACNS,MAAO,IALP,EAAKH,SAAW,EAAKA,SAASM,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAHN,E,qDASLtB,GACLK,KAAKJ,SAAL,eACKD,EAAEE,OAAOQ,KAAOV,EAAEE,OAAOC,U,+BAGzBH,GACLA,EAAEwB,iBACFnB,KAAKC,MAAMmB,WAAX,eAEWpB,KAAKR,QAGhBQ,KAAKJ,SAAS,CACVS,KAAM,GACNS,MAAO,O,+BAIX,OACI,6BACI,0BAAMI,SAAUlB,KAAKkB,UACjB,2BAAOb,KAAK,OAAOI,GAAG,OAAOC,YAAY,eAAeC,SAAUX,KAAKW,SAAUb,MAAOE,KAAKR,MAAMa,OAAQ,6BAC3G,2BAAOA,KAAK,QAAQI,GAAG,QAAQC,YAAY,uBAAuBC,SAAUX,KAAKW,SAAUb,MAAOE,KAAKR,MAAMsB,QAC7G,6C,GAjCDC,aCmBJM,E,uKATP,OACI,6BACI,kBAAC,EAAD,CAAMnB,SAAUF,KAAKC,MAAMC,WAC3B,kBAAC,EAAD,CAAMkB,WAAYpB,KAAKC,MAAMmB,kB,GAXtBL,aC8BRO,E,kDA7Bb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAGRT,MAAQ,CACNU,SAAU,CACR,CAAEG,KAAM,eAAgBS,MAAO,gBAAiBL,GAAI,GACpD,CAAEJ,KAAM,gBAAiBS,MAAO,gBAAiBL,GAAI,GACrD,CAAEJ,KAAM,kBAAmBS,MAAO,gBAAiBL,GAAI,KANzD,EAAKW,WAAa,EAAKA,WAAWH,KAAhB,gBAFD,E,uDAWRb,GAAU,IACXF,EAAaF,KAAKR,MAAlBU,SACRA,EAASqB,KAAKnB,GAEdJ,KAAKJ,SAAS,CACZM,SAAUA,M,+BAKZ,OACE,yBAAKM,UAAU,OACb,kBAAC,EAAD,CAAUN,SAAUF,KAAKR,MAAMU,SAAUkB,WAAYpB,KAAKoB,kB,GAxBhDL,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff8c65df.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './list.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass List extends Component {\r\n    static propTypes = {\r\n        contacts: PropTypes.array.isRequired\r\n    }\r\n    state = {\r\n        filterText: \" \"\r\n    }\r\n    onChangeFilterText = (e) => {\r\n        this.setState({\r\n            filterText: e.target.value\r\n        });\r\n    }\r\n    render() {\r\n        const filteredContacts = this.props.contacts.filter(\r\n            contact=>{\r\n                return contact.name.toLowerCase().indexOf(\r\n                    this.state.filterText.toLowerCase()\r\n                ) !== -1\r\n            }\r\n        )\r\n        return (\r\n            <div className={\"listArea\"}>\r\n                <input name=\"filter\" id=\"filter\" placeholder={\"Filter by name or phone\"} value={this.state.filterText} onChange={this.onChangeFilterText} />\r\n                <ul className={\"list\"}>\r\n                    {filteredContacts.map(contact =>\r\n                        <li key={contact.id}>\r\n                            <span className={\"name\"}>{contact.name}</span>\r\n                            <span className={\"phone\"}>{contact.phone}</span>\r\n                            <span className={\"clearfix\"}></span>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n    constructor() {\r\n        super();\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n    state = {\r\n        name: \"\",\r\n        phone: \"\"\r\n    }\r\n    onChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.addContact(\r\n            {\r\n                ...this.state\r\n            }\r\n        );\r\n        this.setState({\r\n            name: \"\",\r\n            phone: \"\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input name=\"name\" id=\"name\" placeholder=\"Enter a name\" onChange={this.onChange} value={this.state.name} /><br />\r\n                    <input name=\"phone\" id=\"phone\" placeholder=\"Enter a phone number\" onChange={this.onChange} value={this.state.phone} />\r\n                    <button>Add</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Form; ","import React, { Component } from 'react'\r\nimport List from './List'\r\nimport Form from './Form'\r\nimport PropTypes from 'prop-types'\r\nclass Contacts extends Component {\r\n\r\n    static propTypes = {\r\n        contacts: PropTypes.array.isRequired,\r\n        addContact: PropTypes.func\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <List contacts={this.props.contacts}/>\r\n                <Form addContact={this.props.addContact}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React, { Component } from 'react';\nimport './App.css';\nimport Contacts from './Contacts';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.addContact = this.addContact.bind(this);\n  }\n  state = {\n    contacts: [\n      { name: \"Anar Seferov\", phone: \"050 227 47 37\", id: 1 },\n      { name: \"Ayaz Memmedov\", phone: \"050 225 45 35\", id: 2 },\n      { name: \"Gunel Qurbanova\", phone: \"055 344 32 44\", id: 3 }\n    ]\n  };\n  addContact(contact) {\n    const { contacts } = this.state\n    contacts.push(contact)\n\n    this.setState({\n      contacts: contacts\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Contacts contacts={this.state.contacts} addContact={this.addContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}